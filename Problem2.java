public class Problem2{
	public static void main(String args[]){
	/*Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
	By starting with 1 and 2, the first 10 terms will be:
	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.*/

	//Because of how odds and evens are added, after 1 and 2, starting  at 3 as the "first", every third term will be even.
	/*True fibonacci sequence starts with two ones(at least that's how I learned it). Makes more sense mathmatically because 
	you can say definitively that every third term will be even and 2 is your first third term*/

	//First two terms
	int num1 = 1;
	int num2 = 1;

	//Place holder for finding next num in sequence
	int num3 = 0;

	//Sum of even fibonacci nums(every third term)
	int sum = 0;

	//Already have first two nums in sequence(1&1), so count is initialized at 2
	int count = 2;

	//Calculate next num in sequence(num3) using num1 and num2 and then push num2 and num3 back on to num1 and num2 respectively
	/*Every third term, which will be even, gets added to sum and count gets reset. Could also do this with mods but I think that 
	would take more processing power. Could just mod the count too I guess*/
	while(num3 < 4000000)
	{
		num3 = num1 + num2;
		num1 = num2;
		num2 = num3;
		count ++;
		if(count == 3 && num3 < 4000000)/*added the <4000000 because of how while loops work(first num3 that doesn't meet the
																			condition will still go through the loop). Don't think it matters in this case since
																			it would also have to be an even num to get added to the sum.*/
		{
			count = 0;
			sum += num3;
		}
	}

	System.out.println(sum);

	}
}